generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model anime {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title        String      @db.VarChar(255)
  genre        String      @db.VarChar(255)
  release_date DateTime    @db.Timestamp(6)
  episodes     Int
  duration     Int
  status       String      @db.VarChar(255)
  created_at   DateTime    @default(now()) @db.Timestamp(6)
  updated_at   DateTime    @default(now()) @db.Timestamp(6)
  review       review[]
  watchlist    watchlist[]
}

model company {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model moderation {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  action     String   @db.VarChar(255)
  reason     String?  @db.VarChar(255)
  review_id  String   @db.Uuid
  user_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  review     review   @relation(fields: [review_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model review {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title      String       @db.VarChar(255)
  content    String
  rating     Int
  anime_id   String       @db.Uuid
  user_id    String       @db.Uuid
  created_at DateTime     @default(now()) @db.Timestamp(6)
  updated_at DateTime     @default(now()) @db.Timestamp(6)
  moderation moderation[]
  anime      anime        @relation(fields: [anime_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String       @unique @db.VarChar(255)
  firstName   String?      @db.VarChar(255)
  lastName    String?      @db.VarChar(255)
  roq_user_id String       @db.VarChar(255)
  tenant_id   String       @db.VarChar(255)
  created_at  DateTime     @default(now()) @db.Timestamp(6)
  updated_at  DateTime     @default(now()) @db.Timestamp(6)
  company     company[]
  moderation  moderation[]
  review      review[]
  watchlist   watchlist[]
}

model watchlist {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  anime_id   String   @db.Uuid
  user_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  anime      anime    @relation(fields: [anime_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
